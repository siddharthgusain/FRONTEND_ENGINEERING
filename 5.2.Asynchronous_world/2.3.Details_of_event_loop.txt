1. Event Loop:- its a programm containing infinite loop 
It has two jobs:-
1. Check the status of call stack , if empty then schedule the callbacks present in queue
2. Check status of microtask queue and callback queue.

2. Queue Are of two types:-
-> Callback queue/Task Queue:- Queue containing callbacks like settimeout , dom related , storage related etc.
-> Microtask Queue :- Queue containing Promise based callbacks , and Mutation observer based API

NOTE:- Microtask Queue has higher priority than callback queue 
So, all callbacks in microstak queue are scheduled first.

-> So Blocking this call stack with shitty code or slow code leads to blocking main thread of renderer
process as this JS engine is running in main thread, Thus, JANK appears on screen.

-> Thats why heavy animations are generally not recommended for scalable applications , debouncing is 
one way to reduce it.

-> Its important to write callbacks carefully and add event listerners carefully.

//-----SIMPLE EVENT LOOP---------------

while (queue.waitForMessage()) {
  queue.processNextMessage();
}

-> queue.waitForMessage() waits synchronously for a message to arrive 
(if one is not already available and waiting to be handled).

/*
-> In web browsers, messages are added anytime an event occurs and there is an event listener attached 
to it. 

-> If there is no listener, "THE EVENT IS LOST". 

-> So a click on an element with a click event handler will add a message â€” likewise with any other event.
*/