-> We have talked about some problems with native module support in browser
-> Also doing http request for each module can decrease the performance of website
-> SO there is need to bundle the JS modules into one or more bundled js file, this is solved by
module bundlers.

-> In real-life, browser modules are rarely used in their “raw” form. Usually, we bundle 
them together with a special tool such as Webpack and deploy to the production server.

-> At its core, Module Bundlers is a "STATIC MODULE BUNDLER" for modern JavaScript applications. 
-> When webpack processes your application, it internally builds a "DEPENDENCY GRAPH" from one or 
more entry points and then combines every module your project needs into one or more bundles, 
which are "STATIC ASSETS" to serve your content from.
->SO basically , these bundlers do bundling before sending to browser

VARIOUS FAMOUS MODULE BUNDLERS:-
1. Webpack 
2. Vite
3. Parcel

-> One of the benefits of using bundlers – they give more control over how modules are resolved,
allowing bare modules and much more, like CSS/HTML modules.

Build tools do the following:

1. Take a “main” module, the one intended to be put in <script type="module"> in HTML.
2. Analyze its dependencies: imports and then imports of imports etc.
3. Build a single file with all modules (or multiple files, that’s tunable), replacing native import 
calls with bundler functions, so that it works. “Special” module types like HTML/CSS modules 
are also supported.
4. In the process, other transformations and optimizations may be applied:
            -> Unreachable code removed.
            -> Unused exports removed (“tree-shaking”).
            -> Development-specific statements like console and debugger removed.
            -> Modern, bleeding-edge JavaScript syntax may be transformed to older one with similar functionality using Babel.
            -> The resulting file is minified (spaces removed, variables replaced with shorter names, etc).